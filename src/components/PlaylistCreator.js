import axios from "axios";
import React, { useState } from "react";
import { createPlaylistEndpoint, generateRecommendationsEndpoint } from "../constants/ApiEndpoints";
import { MAX_SEED_LIMIT } from "../constants/Constants";
import '../styles/PlaylistCreator.css';
import Artists from "./Artists";
import Genres from "./Genres";
import RangeSlider from "./RangeSlider";
import RecommendedSongsTable from "./RecommendedSongsTable";
import { useAuth } from '../auth/AuthContext';

function getGenerateRecommendationsEndpoint(queryParams) {
    const minDuration = queryParams.duration[0] * 1000
    const maxDuration = queryParams.duration[1] * 1000
    const genres = queryParams.genres
    const genreSubstring = genres?.length > 0 ? ("&seed_genres=" + genres.join("%2C")) : ""
    const artists = queryParams.artists;
    const artistsSubstring = artists?.length > 0 ? ("&seed_artists=" + artists.join("%2C")) : ""
    return generateRecommendationsEndpoint(artistsSubstring, genreSubstring, minDuration, maxDuration);
}

function postCreatePlaylistRequest(token, data, playlistName) {

    axios.post(createPlaylistEndpoint, JSON.stringify({name: playlistName}),
    {
        headers: {
            Authorization: "Bearer " + token,
            "Content-Type": "application/json"
        }
    }
    ).then((response) => {
        const playlistId = response.data.id;
        const addItemsToPlaylistEndpoint = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`
        const trackUris = data?.tracks?.map((track) => track.uri);
        const playlistItemsAsData = {
            uris: trackUris,
            position: 0
        }
        axios.post(addItemsToPlaylistEndpoint, JSON.stringify(playlistItemsAsData),
            {
                headers: {
                    Authorization: "Bearer " + token,
                    "Content-Type": "application/json"
                }
            }
        ).then((response) => {
            alert(`Successfully saved playlist \"${playlistName}\" to your Spotify library.`);
        })
        .catch((error) => {
            alert("Error adding tracks to playlist: " + error);
        })
    })
    .catch((error) => {
        alert("Error creating playlist: " + error);
    })
}

function selectedItemsAreValid(selectedGenres, selectedArtists) {
    if (selectedGenres.length + selectedArtists.length === 0) {
        alert("Please specify at least one genre or one artist.");
        return false;
    }

    if (selectedGenres.length + selectedArtists.length > MAX_SEED_LIMIT) {
        alert("Only 5 seed values are permitted. Please specify fewer genres or artists.");
        return false;
    }

    return true;
}

function PlaylistCreator () {
    const { currentToken } = useAuth();
    const token = currentToken.access_token;
    console.log(' token ' + token);
    const [durationRange, setDurationRange] = useState([360,500])
    const [data, setData] = useState({});
    const [selectedGenres, setSelectedGenres] = useState([]);
    const [selectedArtists, setSelectedArtists] = useState([]);
    const [artistNamesToIds, setArtistNamesToIds] = useState({});

    const handleDurationChange = (newDurationRange) => {
        setDurationRange(newDurationRange);
    };

    const handleReset = () => {
        setData({});
        setSelectedGenres([]);
        setSelectedArtists([]);
    }

    const handleGenerateRecommendations = () => {
        if (!selectedItemsAreValid(selectedGenres, selectedArtists)) {
            return;
        }

        const selectedArtistIds = selectedArtists.reduce(function(acc, item){
            acc.push(artistNamesToIds[item]);
            return acc;
        }, []);
        const endpoint = getGenerateRecommendationsEndpoint({duration: durationRange, genres: selectedGenres, artists: selectedArtistIds});
        axios.get(endpoint,
                {
                    headers: {
                        Authorization: "Bearer " + token
                    }
                }
            ).then((response) => {
                if (response.data.tracks.length === 0) {
                    alert("No recommendations generated by Spotify.");
                    return;
                }
                setData(response.data);
            })
            .catch((error) => {
                console.log("Error generating recommendations: " + error);
            })
    };

    const handleCreatePlaylist = () => {
        const playlistName = `Between ${durationRange[0]} and ${durationRange[1]} seconds`;

        if (!data || !data.tracks || data.tracks.length === 0) {
            alert('Generate songs before creating playlist.');
            return;
        }

        postCreatePlaylistRequest(token, data, playlistName);
    };

   return (
    <>
        <h3>Song duration (in seconds)</h3>
        <RangeSlider onChange={handleDurationChange} durationRange={durationRange} />
        <Artists token={token} artistNamesToIds={artistNamesToIds} setArtistNamesToIds={setArtistNamesToIds} selectedArtists={selectedArtists} setSelectedArtists={setSelectedArtists}/>
        <Genres selectedGenres={selectedGenres} setSelectedGenres={setSelectedGenres}/>
        <button onClick={handleReset}>Reset</button>
        <button onClick={handleGenerateRecommendations}>Generate Songs</button><button onClick={handleCreatePlaylist}>Add Playlist to Library</button>
        <RecommendedSongsTable rows={data?.tracks ? data.tracks : []}/>
    </>
   );
}

export default PlaylistCreator
